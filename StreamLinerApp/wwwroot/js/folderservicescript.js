document.addEventListener('DOMContentLoaded', () => {
    const contextMenu = document.getElementById('custom-context-menu');

    // Get all elements with the class 'right-click-item'
    // This will select all the divs generated by the C# loop.
    const rightClickableItems = document.querySelectorAll('.right-click-item');

    // Add a 'contextmenu' event listener to each folder item
    rightClickableItems.forEach(item => {
        item.addEventListener('contextmenu', (e) => {
            // Prevent the default browser context menu from appearing
            e.preventDefault();

            // Store the ID and Name of the folder that was right-clicked
            // We retrieve this data from the 'data-' attributes on the div
            contextMenu.dataset.targetFolderId = e.currentTarget.dataset.folderId;
            contextMenu.dataset.targetFolderName = e.currentTarget.dataset.folderName;

            // Position the custom context menu at the mouse's position
            contextMenu.style.top = `${e.clientY}px`;
            contextMenu.style.left = `${e.clientX}px`;

            // Display the custom menu
            contextMenu.style.display = 'block';
        });
    });

    // Hide the custom context menu when the user clicks anywhere else on the page
    document.addEventListener('click', () => {
        contextMenu.style.display = 'none';
    });

    // Handle clicks on the menu items themselves
    contextMenu.addEventListener('click', (e) => {
        // Get the action from the clicked menu item's data attribute
        const action = e.target.dataset.action;

        // Get the ID and Name of the folder that was right-clicked
        const targetFolderId = contextMenu.dataset.targetFolderId;
        const targetFolderName = contextMenu.dataset.targetFolderName;

        if (action && targetFolderId && targetFolderName) {
            if (action === 'open') {
                // Navigate to the folder view page
                window.location.href = `/DMS/MyRepository/Folder/${targetFolderId}`;
                return; // Exit the function after navigation
            }
            if (action === 'download') {
                // DownloadFolder
                fetch(`/DMS/MyRepository/DownloadFolder/${targetFolderId}`)
                    .then(response => {
                        if (!response.ok) throw new Error("Network error");
                        return response.blob();
                    })
                    .then(blob => {
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement("a");
                        a.href = url;
                        a.download = `${targetFolderName}.zip`; // file name
                        document.body.appendChild(a);
                        a.click();
                        a.remove();
                        window.URL.revokeObjectURL(url);
                    })
                    .catch(error => console.error("Download failed:", error));
            }
            // if (action === 'Share') {
            //     // Implement share logic here
            //     alert(`Sharing folder "${targetFolderName}" (ID: ${targetFolderId})`);
            //     return; // Exit the function after handling share
            // }
            // if (action === 'Copy') {
            //     // Implement copy logic here
            //     alert(`Copying folder "${targetFolderName}" (ID: ${targetFolderId})`);
            //     return; // Exit the function after handling copy
            // }
            if (action === 'rename') {
                // Implement rename logic here
                const myModalElement = document.getElementById('renamefolder');
                const myModal = new bootstrap.Modal(myModalElement);
                document.getElementById('NewFolderId').value = targetFolderId;

                // To show the modal
                myModal.show();
                return; // Exit the function after handling rename
            }
            if (action === 'delete') {
                // Implement rename logic here
                const myModalElement = document.getElementById('deletefolder');
                const myModal = new bootstrap.Modal(myModalElement);
                document.getElementById('deletefolderid').value = targetFolderId;
                document.getElementById('deletefoldername').innerText = targetFolderName;

                // To show the modal
                myModal.show();
                return; // Exit the function after handling rename
            }
            // Log the action and the folder details to the console for debugging
            console.log(`Action: ${action} ID: ${targetFolderId} on Folder: ${targetFolderName} )`);

            // A simple message to demonstrate it's working
            //alert(`You chose to "${action}" on folder "${targetFolderName}  ID: ${targetFolderId}"`);

            // Here is where you would call a function to handle the specific action,
            // like opening a modal for 'Rename' or making an AJAX call for 'Delete'.
        }
    });
});

$(document).ready(function () {
    // Handle form submission (insert data)
    $('#sendDataButton').click(function () {
        var folderId = $('#folderId').val();
        var userId = $('#userId').val();
        var folderPermissionId = $('#folderPermissionId').val();

        console.log("------------.");
        console.log("Folder ID:", folderId);
        console.log("User ID:", userId);
        console.log("Folder Permission ID:", folderPermissionId);

        // Send data to the controller using AJAX
        $.ajax({
            url: '@Url.Action("AddFolderPermission", "MyRepository")', // The controller action URL
            type: 'POST', // Use POST for data insertion
            data: {
                folderid: folderId,
                userid: userId,
                folderpermissionid: folderPermissionId
            },
            success: function (result) {
                // On success, the controller returns the updated HTML for the table.
                // We replace the content of our table container with this new HTML.
                $('#tableContainer').html(result);

                // You might want to clear the form inputs after a successful submission
                $('#userId').val('0');
                $('#folderPermissionId').val('0');
            },
            error: function (xhr, status, error) {
                // Handle errors here
                console.error("Error submitting data:", error);
                alert("An error occurred while adding the data.");
            }
        });
    });

    // Handle delete button clicks using event delegation
    $(document).on('click', '.delete-button', function () {
        var idToDelete = $(this).data('id');

        // Send ID to the controller for deletion
        $.ajax({
            url: '@Url.Action("DeleteFolderPermission", "MyRepository")', // The controller action URL
            type: 'POST',
            data: { id: idToDelete },
            success: function (result) {
                // Refresh the table with the new data from the server
                $('#tableContainer').html(result);
                // alert("Data deleted successfully.");
            },
            error: function (xhr, status, error) {
                console.error("Error deleting data:", error);
                alert("An error occurred while deleting the data.");
            }
        });
    });
});